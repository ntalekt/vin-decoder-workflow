name: BaT Porsche 911 Scraper

on:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  workflow_dispatch:  # Allow manual triggering
    inputs:
      max_runtime:
        description: 'Maximum runtime in minutes'
        required: false
        default: '45'
        type: string

env:
  MAX_RUNTIME_MINUTES: ${{ github.event.inputs.max_runtime || '45' }}

jobs:
  scrape-bat:
    name: Scrape BaT for Porsche 911s
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      
      - name: Install ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d'.' -f1-3)
          DRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
          curl -L -o chromedriver.zip "https://chromedriver.storage.googleapis.com/$DRIVER_VERSION/chromedriver_linux64.zip"
          sudo unzip chromedriver.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
      
      - name: Run BaT scraper
        run: |
          cd scripts
          python scrape_bat.py \
            --max-runtime ${{ env.MAX_RUNTIME_MINUTES }} \
            --output ../bat-porsche-911-listings-$(date +%Y%m%d-%H%M).json
        continue-on-error: true
      
      - name: Merge BaT inventory
        run: |
          cd scripts
          LATEST_FILE=$(ls -t ../bat-porsche-911-listings-*.json 2>/dev/null | head -n1)
          if [ -n "$LATEST_FILE" ]; then
            python merge_bat_inventory.py \
              --input "$LATEST_FILE" \
              --bat-inventory ../bat_inventory.json
            mkdir -p ../archived_scrapes
            mv "$LATEST_FILE" ../archived_scrapes/
          else
            echo "No BaT listings file found to process"
          fi
      
      - name: Create summary report
        run: |
          echo "# BaT Scrape Summary - $(date)" > bat_scrape_summary.md
          echo "" >> bat_scrape_summary.md
          if [ -f bat_inventory.json ]; then
            python3 - <<END >> bat_scrape_summary.md
import json
with open("bat_inventory.json") as f:
    data = json.load(f)
inventory = data.get("inventory", [])
metadata = data.get("metadata", {})
print("## Scrape Results")
print(f"- **Total VINs in BaT Inventory**: {len(inventory)}")
print(f"- **New VINs This Scrape**: {metadata.get('last_scrape_new', 0)}")
print(f"- **Updated VINs This Scrape**: {metadata.get('last_scrape_updated', 0)}")
print(f"- **Total Scrapes**: {metadata.get('total_scrapes', 0)}")
print(f"- **Last Updated**: {metadata.get('last_updated', 'Unknown')}")
print()
years = {}
for item in inventory:
    year = item.get("model_year", "Unknown")
    years[year] = years.get(year, 0) + 1
print("## Inventory by Year:")
for year in sorted(years):
    print(f"- **{year}**: {years[year]} vehicles")
END
          else
            echo "- **Status**: No BaT inventory found" >> bat_scrape_summary.md
          fi
      
      - name: Commit and push updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add bat_inventory.json bat_scrape_summary.md archived_scrapes/
          if git diff --cached --quiet; then
            echo "📝 No changes to commit"
          else
            git commit -m "🏎️ BaT scrape update: $(date '+%Y-%m-%d %H:%M UTC')"
            git push
            echo "✅ BaT inventory updated and pushed"
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bat-scrape-results-${{ github.run_number }}
          path: |
            bat_inventory.json
            bat_scrape_summary.md
            archived_scrapes/
          retention-days: 30
        if: always()
      
      - name: Display final summary
        run: |
          echo "🏁 BaT Scraper Workflow Complete"
          echo "⏱️  Max Runtime: ${{ env.MAX_RUNTIME_MINUTES }} minutes"
          echo "📊 Check bat_inventory.json for results"
          echo "📋 Check bat_scrape_summary.md for detailed report"
          if [ -f bat_inventory.json ]; then
            TOTAL_VINS=$(python3 -c "import json; data=json.load(open('bat_inventory.json')); print(len(data.get('inventory', [])))")
            echo "🚗 Total BaT VINs: $TOTAL_VINS"
          fi

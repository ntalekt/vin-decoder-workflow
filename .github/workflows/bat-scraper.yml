name: BaT Porsche 911 Scraper

on:
  # schedule:
  #   - cron: '21 12 * * *' # 12:21 PM UTC = 5:21 AM MST
  workflow_dispatch: # Allow manual triggering
    inputs:
      max_runtime:
        description: 'Maximum runtime in minutes'
        required: false
        default: '120'
        type: string
      max_listings:
        description: 'Maximum number of listings to scrape (for testing)'
        required: false
        default: ''
        type: string

env:
  MAX_RUNTIME_MINUTES: ${{ github.event.inputs.max_runtime || '120' }}
  MAX_LISTINGS: ${{ github.event.inputs.max_listings || '' }}

jobs:
  scrape-bat:
    name: Scrape BaT for Porsche 911s
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install ChromeDriver
        run: |
          # Get Chrome version more reliably
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
          echo "Chrome version: $CHROME_VERSION"
          
          # Extract major version for ChromeDriver compatibility
          CHROME_MAJOR=$(echo $CHROME_VERSION | cut -d'.' -f1)
          echo "Chrome major version: $CHROME_MAJOR"
          
          # Download and install ChromeDriver
          if [ "$CHROME_MAJOR" -ge "115" ]; then
            # For Chrome 115+ use the new ChromeDriver API
            DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$CHROME_MAJOR")
            DRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/$DRIVER_VERSION/linux64/chromedriver-linux64.zip"
          else
            # For older Chrome versions use legacy API
            DRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_MAJOR")
            DRIVER_URL="https://chromedriver.storage.googleapis.com/$DRIVER_VERSION/chromedriver_linux64.zip"
          fi
          
          echo "ChromeDriver version: $DRIVER_VERSION"
          echo "Download URL: $DRIVER_URL"
          
          # Download and install
          curl -L -o chromedriver.zip "$DRIVER_URL"
          sudo unzip chromedriver.zip -d /usr/local/bin/
          
          # Handle different archive structures
          if [ -f /usr/local/bin/chromedriver-linux64/chromedriver ]; then
            sudo mv /usr/local/bin/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
            sudo rm -rf /usr/local/bin/chromedriver-linux64
          fi
          
          sudo chmod +x /usr/local/bin/chromedriver
          rm chromedriver.zip
          
          # Verify installation
          chromedriver --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Run BaT scraper
        run: |
          cd scripts
          
          # Build the command with optional max-listings parameter
          SCRAPE_CMD="python scrape_bat.py --max-runtime ${{ env.MAX_RUNTIME_MINUTES }} --output ../bat-porsche-911-listings-$(date +%Y%m%d-%H%M).json"
          
          # Add max-listings parameter if provided
          if [ -n "${{ env.MAX_LISTINGS }}" ]; then
            SCRAPE_CMD="$SCRAPE_CMD --max-listings ${{ env.MAX_LISTINGS }}"
            echo "üéØ Running in testing mode with max ${{ env.MAX_LISTINGS }} listings"
          else
            echo "üöÄ Running full scrape"
          fi
          
          echo "Executing: $SCRAPE_CMD"
          eval $SCRAPE_CMD
        continue-on-error: true

      - name: Merge BaT inventory
        run: |
          cd scripts
          LATEST_FILE=$(ls -t ../bat-porsche-911-listings-*.json 2>/dev/null | head -n1)
          if [ -n "$LATEST_FILE" ]; then
            python merge_bat_inventory.py \
              --input "$LATEST_FILE" \
              --bat-inventory ../bat_inventory.json
            mkdir -p ../archived_scrapes
            mv "$LATEST_FILE" ../archived_scrapes/
          else
            echo "No BaT listings file found to process"
          fi

      - name: Commit and push updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add bat_inventory.json archived_scrapes/
          if git diff --cached --quiet; then
            echo "üìù No changes to commit"
          else
            # Include testing info in commit message if applicable
            COMMIT_MSG="üèéÔ∏è BaT scrape update: $(date '+%Y-%m-%d %H:%M UTC')"
            if [ -n "${{ env.MAX_LISTINGS }}" ]; then
              COMMIT_MSG="$COMMIT_MSG (test run: ${{ env.MAX_LISTINGS }} listings)"
            fi
            git commit -m "$COMMIT_MSG"
            git push
            echo "‚úÖ BaT inventory updated and pushed"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bat-scrape-results-${{ github.run_number }}
          path: |
            bat_inventory.json
            archived_scrapes/
          retention-days: 30
        if: always()

      - name: Display final summary
        run: |
          echo "üèÅ BaT Scraper Workflow Complete"
          echo "‚è±Ô∏è Max Runtime: ${{ env.MAX_RUNTIME_MINUTES }} minutes"
          if [ -n "${{ env.MAX_LISTINGS }}" ]; then
            echo "üéØ Max Listings: ${{ env.MAX_LISTINGS }} (testing mode)"
          fi
          echo "üìä Check bat_inventory.json for results"
          if [ -f bat_inventory.json ]; then
            TOTAL_VINS=$(python3 -c "import json; data=json.load(open('bat_inventory.json')); print(len(data.get('inventory', [])))")
            echo "üöó Total BaT VINs: $TOTAL_VINS"
          fi
